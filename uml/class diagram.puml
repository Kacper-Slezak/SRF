@startuml
class User {
    + userId: int
    + username: String
    + password: String
    + sessionID: String
    + getId(): int
    + setId(): int
    + getUsername(): String
    + setUsername(): String
    + getPasswordHash(): String
    + setPassword(password: String): void
}

class HomeController {
    + search(query: String): List<Movie>
    + generateRecommendations(userId: int, limit: int): List<Movie>
}

class SearchService {
    + searchMovies(query: String): List<Movie>
}

class RecommendationService {
    + generateRecommendationsAsync(userId: int, limit: int): List<Movie>
    + prepareRatingMatrix() double ratingMatrix
    + generateRecommendations(userID: int, double predictedRating, double originalRating): List<MovieRecommendations> finalRecomendations
}

class MovieController {
    + selectMovie(movieId: int): Movie
    + saveRating(userId: int, movieId: int, rating: int): void
    + fetchImdbUrl(movieId: int): String
}

class movieCreatorController {
    + setMovie(newMovie: Movie): void
    + saveRating(userId: int, movieId: int, rating: int): void
}

class LoginController {
    + login(username: String, password: String): void
}

class RegistrationController {
    + register(username: String, password: String, confirmPassword: String): void
}

class AuthenticationService {
    + login(username: String, password: String): User
    + register(username: String, password: String, repeatPassword: String): void
    + validateLoginData(username: String, password: String): boolean
    + getCurrentUser(sessionID: String)
    + validateLoginData(username: String, password: String, repeatPassword: String): boolean
}

class SVDRecommender {
    + computeSVD(ratings: double , k: int)
    + validateInput(double ratings)
    + calculateRowMeans(ratings: double, numUsers: int, numMovies: int)
    + simpleMatrix(ratings: double, rowMeans: double, numUsers: int, numMovies: int)
}

class MovieSingleton {
    + getMovie(): Movie
    + setMovie(newMovie: Movie): void
}

class UserSingleton {
    + getUser(): User
}

class MovieDAO {
    + getMovies(query: String): List<Movie>
    + getMoviesByRatings(ratings: List<Rating>): List<Movie>
}

class UserDAO {
    + findUserByUsername(username: String): User
    + addUser(User: user): void
    + saveUser(User: user): void
}

class RatingDAO {
    + addRating(Rating: rating): void
    + findRating(userId: int, movieId: int): Rating
    + updateRating(Rating: rating): void
}

class IMDbDAO {
    + getImdbIdByMovieId(movieId: int)
    + addImdbLink(IMDb: link)
}

class RatingService {
    + saveRating(userId: int, movieId: int, rating: int): void
}

class imdbService {
    + fetchImdbUrl(movieId: int): String
}

class AlertManager {
    + showMessage(message: String): void
}

class SceneManager {
    + switchToHomeScene(): void
    + switchToLoginScene(): void
}

class DatabaseConnection {
    + getConnection(): Connection
}

class Movie {
    + Id: int
    + title: String
    + genre: String
    + getId(): int
    + setId(): int
    + getTitle(): String
    + setTitle(): String
    + getGenre(): String
    + setGenre(): String
}

class Rating {
    + rating: double
    + userId: int
    + movieId: int
    + getMovieId(): int
    + setMovieId(): int
    + getUserId(): int
    + setUserId(): int
    + getRating(): double
    + setRating(): double
}

User  --  UserSingleton
Movie  --  MovieSingleton
HomeController  --  SearchService
HomeController  --  RecommendationService
MovieController  --  MovieSingleton
MovieController  --  imdbService
RecommendationService  --  RatingDAO
RecommendationService  --  MovieDAO
AuthenticationService  --  UserDAO
RatingService  --  RatingDAO
movieCreatorController  --  RatingService
movieCreatorController  --  MovieSingleton
@enduml
